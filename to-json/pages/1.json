{"base":"pages/","current":1,"prev":0,"next":2,"current_url":"pages/","prev_link":"","next_link":"pages//2","posts":[{"title":"嵊泗的离岛生活","slug":"Life-in-Shengsi-Islands","updated":1487224791195,"link":"","permalink":"http://www.fedjs.com/2016/12/Life-in-Shengsi-Islands/","path":"2016/12/Life-in-Shengsi-Islands/","photos":[],"comments":true,"source":"_posts/Life-in-Shengsi-Islands.md","published":true,"excerpt":"","content":"<p>这是我第一次踏上这个岛屿，你不用知道她的过去，你只要踏上去就能深刻感受她的不同，而我不仅仅是喜欢那的景色，更大的兴趣是她身上的人和事。</p>","prev":{"title":"关于借贷和裸条的一点思考","slug":"sale-yourself-for-money","updated":1482300506754,"link":"","permalink":"http://www.fedjs.com/2016/12/sale-yourself-for-money/","path":"2016/12/sale-yourself-for-money/","photos":[],"comments":true,"source":"_posts/sale-yourself-for-money.md","published":true},"next":{"title":"离岛随想（一）","slug":"islands-capriccio","updated":1487224806416,"link":"","permalink":"http://www.fedjs.com/2016/12/islands-capriccio/","path":"2016/12/islands-capriccio/","photos":[],"comments":true,"source":"_posts/islands-capriccio.md","published":true},"categories":[{"name":"旅行日志","slug":"旅行日志","path":"categories/旅行日志/","permalink":"http://www.fedjs.com/categories/旅行日志/","length":2}],"tags":[{"name":"游记","slug":"游记","path":"tags/游记/","permalink":"http://www.fedjs.com/tags/游记/","length":2}]},{"title":"离岛随想（一）","slug":"islands-capriccio","updated":1487224806416,"link":"","permalink":"http://www.fedjs.com/2016/12/islands-capriccio/","path":"2016/12/islands-capriccio/","photos":[],"comments":true,"source":"_posts/islands-capriccio.md","published":true,"excerpt":"","content":"<p>没什么人明白自由意味着什么，我也只是在看到别人嘴角泛起笑容的时候，能隐约感受到。</p>\n<p>本来只是想出来散散心的，所以并没有内心里走的匆忙。</p>\n<p>有时候真的想远离城市，去一个没有人打扰的地方好好生活，没有压力和选择，一起都那么平淡。</p>\n<p>我憧憬电影《大河恋》里的生活，不是因为我文艺，而是因为我怀旧，我希望能和老友把酒言欢。</p>\n<p>但突然我停住了脚步，想了些许事，又开始往前走。</p>","prev":{"title":"嵊泗的离岛生活","slug":"Life-in-Shengsi-Islands","updated":1487224791195,"link":"","permalink":"http://www.fedjs.com/2016/12/Life-in-Shengsi-Islands/","path":"2016/12/Life-in-Shengsi-Islands/","photos":[],"comments":true,"source":"_posts/Life-in-Shengsi-Islands.md","published":true},"next":{"title":"231个密码溢出","slug":"key-231-sites","updated":1486352985702,"link":"","permalink":"http://www.fedjs.com/2016/12/key-231-sites/","path":"2016/12/key-231-sites/","photos":[],"comments":true,"source":"_posts/key-231-sites.md","published":true},"categories":[{"name":"旅行日志","slug":"旅行日志","path":"categories/旅行日志/","permalink":"http://www.fedjs.com/categories/旅行日志/","length":2}],"tags":[{"name":"游记","slug":"游记","path":"tags/游记/","permalink":"http://www.fedjs.com/tags/游记/","length":2}]},{"title":"231个密码溢出","slug":"key-231-sites","updated":1486352985702,"link":"","permalink":"http://www.fedjs.com/2016/12/key-231-sites/","path":"2016/12/key-231-sites/","photos":[],"comments":true,"source":"_posts/key-231-sites.md","published":true,"excerpt":"","content":"<p>这事是真的！<br>231个全球最大最重要的账户密码，在BC论坛以比特币出价交易的方式出售了！里面有很多秘密资料。</p>","prev":{"title":"离岛随想（一）","slug":"islands-capriccio","updated":1487224806416,"link":"","permalink":"http://www.fedjs.com/2016/12/islands-capriccio/","path":"2016/12/islands-capriccio/","photos":[],"comments":true,"source":"_posts/islands-capriccio.md","published":true},"categories":[{"name":"Project","slug":"Project","path":"categories/Project/","permalink":"http://www.fedjs.com/categories/Project/","length":1}],"tags":[]},{"title":"npm使用入门","slug":"npm使用入门","updated":1487225121961,"link":"","permalink":"http://www.fedjs.com/2017/02/npm使用入门/","path":"2017/02/npm使用入门/","photos":[],"comments":true,"source":"_posts/npm使用入门.md","published":true,"excerpt":"","content":"","prev":{"title":"webpack插件篇：20个你必须知道的插件","slug":"webpack插件篇：20个你必须知道的插件","updated":1487226561564,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack插件篇：20个你必须知道的插件/","path":"2017/02/webpack插件篇：20个你必须知道的插件/","photos":[],"comments":true,"source":"_posts/webpack插件篇：20个你必须知道的插件.md","published":true},"next":{"title":"webpack-react-redux-startkit","slug":"webpack-react-redux-startkit","updated":1487224873880,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-react-redux-startkit/","path":"2017/02/webpack-react-redux-startkit/","photos":[],"comments":true,"source":"_posts/webpack-react-redux-startkit.md","published":true},"categories":[{"name":"npm","slug":"npm","path":"categories/npm/","permalink":"http://www.fedjs.com/categories/npm/","length":1}],"tags":[]},{"title":"扫盲:JS模块化开发","slug":"talk-about-javascript-module-development","updated":1487224900988,"link":"","permalink":"http://www.fedjs.com/2016/12/talk-about-javascript-module-development/","path":"2016/12/talk-about-javascript-module-development/","photos":[],"comments":true,"source":"_posts/talk-about-javascript-module-development.md","published":true,"excerpt":"","content":"<h1 id=\"什么是模块化开发\"><a href=\"#什么是模块化开发\" class=\"headerlink\" title=\"什么是模块化开发\"></a>什么是模块化开发</h1><p>模块化开发（modular development）,</p>\n<p>模块化开发可以为我们解决以下问题</p>\n<p>其一、恼人的命名冲突：<br>这个确实够烦人，为了解决之，我们动用闭包作用域、我们动用命名空间，再或者… </p>\n<p>其二、烦琐的文件依赖：<br>这个问题更不必说，我们做前端支持的，常常要替后端同学们解决这类问题，我们自己也常常忽略这类问题。平常的开发中，我们要对我们的JS文件的加载顺序要小心加小心。一个字——确实烦。</p>\n<p>其三、严重依赖文件的加载顺序：<br>当你使用script引入类库和外部脚本的时候肯定会遇到 类库标识未定义的问题等等问题像“$定义不存在、$.xxx() is not function”这样或那样的问题，一般都是类库严重依赖script文件的加载顺序导致的。</p>\n<h1 id=\"模块化开发的规范有哪些？\"><a href=\"#模块化开发的规范有哪些？\" class=\"headerlink\" title=\"模块化开发的规范有哪些？\"></a>模块化开发的规范有哪些？</h1><p>CommonJS和AMD、CMD、UMD。</p>\n<p>CommonJS代表：</p>\n<p>AMD代表： Require.js 、 curl.js</p>\n<p>CMD代表： Sea.js</p>\n<h1 id=\"资源介绍：\"><a href=\"#资源介绍：\" class=\"headerlink\" title=\"资源介绍：\"></a>资源介绍：</h1><h3 id=\"博客资料：\"><a href=\"#博客资料：\" class=\"headerlink\" title=\"博客资料：\"></a>博客资料：</h3><p><a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"external\">Javascript模块化编程（一）：模块的写法 - 阮一峰博客</a><br><a href=\"http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html\" target=\"_blank\" rel=\"external\">Javascript模块化编程（二）：AMD规范 - 阮一峰博客</a><br><a href=\"http://www.ruanyifeng.com/blog/2012/11/require_js.html\" target=\"_blank\" rel=\"external\">Javascript模块化编程（三）：require.js的用法 - 阮一峰博客</a></p>\n<h3 id=\"视频（Video）\"><a href=\"#视频（Video）\" class=\"headerlink\" title=\"视频（Video）\"></a>视频（Video）</h3><p><img src=\"\" alt=\"\"></p>","prev":{"title":"webpack全局加载第三方插件jQuery类库","slug":"webpack-jquery","updated":1487237687386,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-jquery/","path":"2017/02/webpack-jquery/","photos":[],"comments":true,"source":"_posts/webpack-jquery.md","published":true},"next":{"title":"关于借贷和裸条的一点思考","slug":"sale-yourself-for-money","updated":1482300506754,"link":"","permalink":"http://www.fedjs.com/2016/12/sale-yourself-for-money/","path":"2016/12/sale-yourself-for-money/","photos":[],"comments":true,"source":"_posts/sale-yourself-for-money.md","published":true},"categories":[{"name":"JS标准指南","slug":"JS标准指南","path":"categories/JS标准指南/","permalink":"http://www.fedjs.com/categories/JS标准指南/","length":1}],"tags":[]},{"title":"关于借贷和裸条的一点思考","slug":"sale-yourself-for-money","updated":1482300506754,"link":"","permalink":"http://www.fedjs.com/2016/12/sale-yourself-for-money/","path":"2016/12/sale-yourself-for-money/","photos":[],"comments":true,"source":"_posts/sale-yourself-for-money.md","published":true,"excerpt":"","content":"<p>原文来自于我的“知乎问答” </p>\n<p><a href=\"https://www.zhihu.com/question/47736379/answer/134776288\" target=\"_blank\" rel=\"external\">如何从「裸条」看待这些借贷人的借贷观念？ - 蒋万万的回答 - 知乎</a></p>\n<p>关于借贷，我觉得祖辈的话还是很受用的。</p>\n<p><strong>1、你惦记别人的利，别人惦记着你的本，到最后，你本利无归，你觉得就这样结束了？别急，一般还有债！</strong><br><strong>2、背叛你的人永远都只会是你的朋友，或者看上去像是你朋友的人。</strong><br><strong>3、人心隔肚皮</strong><br><strong>4、铁打的营盘流水的兵</strong></p>\n<p>没有资本的人其实在现实世界上很难有选择的机会，总是很容易被各种诱惑所主宰，这次的网贷事件就可以说是无法避免的。<br><strong>（第一次生意）</strong><br>年轻的大学生（不分男女）总是有消费的欲望，我们暂不管他们去消费什么，这种需求是客观的存在的。我们呢，也不谈她们人性的光辉，善良或是邪恶、知足或是贪婪，只要有这种消费的动力，她们也只能别无选择的接收这种商品（贷款本身就是一种商品），惦记着这家或那家发布的“学生贷”的好处，交上人家要的正当信息资料，才能进入可以借贷的门槛，那么商家也要做这笔生意，权衡利弊以后觉得可以做你这笔生意，人家才可以把钱贷给你吧。双方觉得不错，签个合同画个押，生意就这样做好了。<br><strong>（第二次生意）</strong><br>商家这样的生意做多了，发现我们的客户（大学生没有钱没有具体的收入来源）质量也不是很好，拼死拼活也就赚这么多。不太好呀，怎么办？这样，你们不是还是需要花钱吗？那你可以多交点东西，比方说多提点利息和罚息，这样我们也更能赚的多些。大学生没办法，提就提吧，反正也是可以还完的，只要可以接收就签。双方觉得不错，签个合同画个押，生意就这样做好了。<br><strong>（第三次生意）</strong><br>“我为什么要签这家网贷，还有其他的可以选择，况且已经有一笔债了，先还完好了。”学生觉得后续情况不太乐观，不想签了。情绪一表现出来，商家就有察觉。“先还完也好，我这边有资金压力，嗯嗯，那你早点还好了。”商家也默认客户质量慢慢变得不好，总还是生意要做的，只不过不能给你那么多额度了，你也不再是我最想要的A类客户了。<br><strong>（第四次生意）</strong><br>逾期了 30天、60天、90天，看着利息每天都在长，自己的收入都填补不了这个坑。怎么办？那就不还了。商家不能等着呆账收不回钱啊。怎么办？等着数额慢慢的变大，再叫人去催收！学生一害怕就又只能老老实实的还钱了。学生想：反正商家也不知道我的钱是怎么来的，不如我再去其他的贷款网站借点钱，以后欠的可以慢慢还。然后又开始借款，拆了东墙补西墙，拆了西墙补东墙。合同签的越来越多，才发现商家的玩法都一样，自己的身上又多了不少的逾期账单。怎么办？<br><strong>（第五次生意）</strong></p>\n<p>商家A的喽啰，就是之前跟你当朋友的那个人，会主动给你提出一个解决方法来解决这种窘境。<br>“因为你借的少了所以你手里的钱的根本没有办法帮你解决实际的收入问题，你需要大幅度的提额，然后还掉我们的家的款，少了一家两家之后，你就会觉得轻松很多！要不逾期和罚息你这辈子都还不完！”商家A的喽啰说道。学生一听也确实是这个理，那就提提额吧。那具体怎么提呢？“要找口子的，你按照我要求的东西提供下，我帮你去找商家B！”喽啰说道。学生只能接收他提的条件。<br><strong>（第六次生意）</strong></p>\n<p>要什么都可以，只要能结束这种情况。<br>So…. ~你懂的！<br><strong>（第七次生意）</strong><br>没办法~忍气吞声<br><strong>（第八次生意）</strong></p>\n<p>没办法~如果不还清，同学们会怎么看我？！</p>\n<p><strong>（第九次生意）</strong></p>\n<p>没办法~信用快要破产了~</p>\n<p><strong>（第十次生意）</strong></p>\n<p>没办法~有人能好心救救我吗？ （现在人心应该没有那么好吧）</p>\n<p><strong>（第十一次生意）</strong></p>\n<p>~</p>\n<p>现在的生意好谈多了，做主子的感觉就是不一样！公司生意也变得的越来越好。商家不只做放贷还可以做其他的生意。</p>\n<p>几次生意过后，这种优势就会变得很明显！<br>但问题是 商业活动本身就是一种追逐胜利的游戏。<br>所以一方一定会想方设法的保持这种优势，这种金钱游戏的玩法最后都是 <strong>以营盘的胜利</strong> 而告终。</p>\n<p>你要明白，现在的女大学生都不傻，而是 <strong>被迫的趋利而为</strong> 而已<strong>！</strong></p>\n<p>小时候一直都生活在家教森严的爷爷奶奶家。<br>从小就接收着传统观念的影响，有很多话听起来好像登不上大雅之堂，但细细想想理确实还是那个理。<br>小声说句：放贷真的是这个世界上最完美的生意！<a href=\"javascript:;\" target=\"_blank\" rel=\"external\"><span>修改</span></a></p>","prev":{"title":"扫盲:JS模块化开发","slug":"talk-about-javascript-module-development","updated":1487224900988,"link":"","permalink":"http://www.fedjs.com/2016/12/talk-about-javascript-module-development/","path":"2016/12/talk-about-javascript-module-development/","photos":[],"comments":true,"source":"_posts/talk-about-javascript-module-development.md","published":true},"next":{"title":"嵊泗的离岛生活","slug":"Life-in-Shengsi-Islands","updated":1487224791195,"link":"","permalink":"http://www.fedjs.com/2016/12/Life-in-Shengsi-Islands/","path":"2016/12/Life-in-Shengsi-Islands/","photos":[],"comments":true,"source":"_posts/Life-in-Shengsi-Islands.md","published":true},"categories":[],"tags":[]},{"title":"webpack.config.js (一)","slug":"webpack-config-js-one","updated":1487293241072,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-config-js-one/","path":"2017/02/webpack-config-js-one/","photos":[],"comments":true,"source":"_posts/webpack-config-js-one.md","published":true,"excerpt":"","content":"<h1 id=\"Webpack配置文件的重要性\"><a href=\"#Webpack配置文件的重要性\" class=\"headerlink\" title=\"Webpack配置文件的重要性\"></a>Webpack配置文件的重要性</h1><h1 id=\"Webpack-vs-Browserify\"><a href=\"#Webpack-vs-Browserify\" class=\"headerlink\" title=\"Webpack vs Browserify\"></a>Webpack vs Browserify</h1><h1 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h1>","prev":{"title":"阿里云 合租计划 0217","slug":"阿里云-合租计划-0217","updated":1487297455973,"link":"","permalink":"http://www.fedjs.com/2017/02/阿里云-合租计划-0217/","path":"2017/02/阿里云-合租计划-0217/","photos":[],"comments":true,"source":"_posts/阿里云-合租计划-0217.md","published":true},"next":{"title":"react-webpack 入门Demo展示","slug":"webpack-react-入门Demo展示","updated":1487234496375,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-react-入门Demo展示/","path":"2017/02/webpack-react-入门Demo展示/","photos":[],"comments":true,"source":"_posts/webpack-react-入门Demo展示.md","published":true},"categories":[{"name":"webpack","slug":"webpack","path":"categories/webpack/","permalink":"http://www.fedjs.com/categories/webpack/","length":6}],"tags":[]},{"title":"webpack全局加载第三方插件jQuery类库","slug":"webpack-jquery","updated":1487237687386,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-jquery/","path":"2017/02/webpack-jquery/","photos":[],"comments":true,"source":"_posts/webpack-jquery.md","published":true,"excerpt":"","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。</p>\n<p>我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情，这块我们后续会提到。</p>\n<p>用webpack最大的问题就是不需要再关注依赖顺序了</p>\n<p><a href=\"http://webpack.github.io/\" target=\"_blank\" rel=\"external\">【webpack 官网】</a></p>\n<p><a href=\"http://webpack.github.io/docs/\" target=\"_blank\" rel=\"external\">【webpack 入门文档】</a></p>\n<h1 id=\"第一种方法（直接引入）：\"><a href=\"#第一种方法（直接引入）：\" class=\"headerlink\" title=\"第一种方法（直接引入）：\"></a>第一种方法（直接引入）：</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"comment\">// 你要引入jquery并交由webpack打包 只需要这样使用</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// webpack会自动去node_modules 目录中查找资源</span></div><div class=\"line\"><span class=\"comment\">// console.log(\"一切就是如此简单愉快！\")</span></div></pre></td></tr></table></figure>\n<h1 id=\"第二种方法（webpack插件引入）：\"><a href=\"#第二种方法（webpack插件引入）：\" class=\"headerlink\" title=\"第二种方法（webpack插件引入）：\"></a>第二种方法（webpack插件引入）：</h1><p>主要依靠 webpack 中 ProvidePlugin 来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">resolve</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">root</span>: [],</div><div class=\"line\">        <span class=\"attr\">alias</span>: &#123;</div><div class=\"line\">            <span class=\"string\">'jquery'</span>: path.resolve(rootDir, <span class=\"string\">'./lib/jquery.min.js'</span>); </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>: [</div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</div><div class=\"line\">            <span class=\"attr\">$</span>: <span class=\"string\">'jquery'</span></div><div class=\"line\">        &#125;),</div><div class=\"line\">    ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"第三种方法（expose-loader-配置）：\"><a href=\"#第三种方法（expose-loader-配置）：\" class=\"headerlink\" title=\"第三种方法（expose-loader 配置）：\"></a>第三种方法（expose-loader 配置）：</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">test</span>: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'jquery'</span>),</div><div class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"string\">'expose?jQuery!expose?$'</span></div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>引用方式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'expose?$!jquery'</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery-ui'</span> <span class=\"comment\">//插件可用</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"第四种方法（封装jQuery）：\"><a href=\"#第四种方法（封装jQuery）：\" class=\"headerlink\" title=\"第四种方法（封装jQuery）：\"></a>第四种方法（封装jQuery）：</h1><ol>\n<li><p>生成 jquery-vendor.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</div><div class=\"line\"><span class=\"comment\">// es6</span></div><div class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'jquery'</span>;</div><div class=\"line\"><span class=\"built_in\">window</span>.$ = $;</div><div class=\"line\"><span class=\"built_in\">window</span>.jQuery = $;</div><div class=\"line\">exports <span class=\"keyword\">default</span> $</div></pre></td></tr></table></figure>\n</li>\n<li><p>类库引用jquery时指向jquery-vendor.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">'$&#123;webroot&#125;/jquery-vendor.js'</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery-ui'</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>调用方便，可在webpack配置文件中创建jquery-vendor.js的别名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">alias:&#123;</div><div class=\"line\">    <span class=\"string\">'jquery'</span>:<span class=\"string\">'$&#123;webroot&#125;/jquery-vendor.js'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>","prev":{"title":"webpack-react-redux-startkit","slug":"webpack-react-redux-startkit","updated":1487224873880,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-react-redux-startkit/","path":"2017/02/webpack-react-redux-startkit/","photos":[],"comments":true,"source":"_posts/webpack-react-redux-startkit.md","published":true},"next":{"title":"扫盲:JS模块化开发","slug":"talk-about-javascript-module-development","updated":1487224900988,"link":"","permalink":"http://www.fedjs.com/2016/12/talk-about-javascript-module-development/","path":"2016/12/talk-about-javascript-module-development/","photos":[],"comments":true,"source":"_posts/talk-about-javascript-module-development.md","published":true},"categories":[{"name":"webpack","slug":"webpack","path":"categories/webpack/","permalink":"http://www.fedjs.com/categories/webpack/","length":6}],"tags":[]},{"title":"webpack-react-redux-startkit","slug":"webpack-react-redux-startkit","updated":1487224873880,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-react-redux-startkit/","path":"2017/02/webpack-react-redux-startkit/","photos":[],"comments":true,"source":"_posts/webpack-react-redux-startkit.md","published":true,"excerpt":"","content":"","prev":{"title":"npm使用入门","slug":"npm使用入门","updated":1487225121961,"link":"","permalink":"http://www.fedjs.com/2017/02/npm使用入门/","path":"2017/02/npm使用入门/","photos":[],"comments":true,"source":"_posts/npm使用入门.md","published":true},"next":{"title":"webpack全局加载第三方插件jQuery类库","slug":"webpack-jquery","updated":1487237687386,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-jquery/","path":"2017/02/webpack-jquery/","photos":[],"comments":true,"source":"_posts/webpack-jquery.md","published":true},"categories":[{"name":"webpack","slug":"webpack","path":"categories/webpack/","permalink":"http://www.fedjs.com/categories/webpack/","length":6}],"tags":[]},{"title":"webpack 用法指南","slug":"webpack-用法指南","updated":1487297224419,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack-用法指南/","path":"2017/02/webpack-用法指南/","photos":[],"comments":true,"source":"_posts/webpack-用法指南.md","published":true,"excerpt":"","content":"<h1 id=\"What-is-Webpack\"><a href=\"#What-is-Webpack\" class=\"headerlink\" title=\"What is Webpack\"></a>What is Webpack</h1><p>module bundler</p>\n<p>module with dependencies</p>\n<p>module generates static assets</p>\n<h1 id=\"Why-Webpack\"><a href=\"#Why-Webpack\" class=\"headerlink\" title=\"Why Webpack\"></a>Why Webpack</h1><p>good for development but also the user experience</p>\n<p>loaded on demand</p>\n<p>cache friendly</p>\n<p>webpack plugins can be injected into into the build process</p>\n<h1 id=\"首次使用Webpack-用CLI-即Command-Line-Interface\"><a href=\"#首次使用Webpack-用CLI-即Command-Line-Interface\" class=\"headerlink\" title=\"首次使用Webpack, 用CLI, 即Command Line Interface\"></a>首次使用Webpack, 用CLI, 即Command Line Interface</h1><p>→ 确认是否安装了NodeJS<br>npm -v<br>→ 安装 Webpack<br>npm install webpack -g<br>→ 创建一个简单的网站<br>…..webpacktest/<br>……….app.js<br>……….index.html<br>→ 导航到webpacktest所在文件夹<br>→ 对app.js文件使用webpack<br>webpack ./app.js bundle.js<br>→ 我们看到在webpacktest目录下多了一个bundle.js文件<br>→ 现在，可以在index.html中引用bundle.js文件，而不是app.js文件</p>\n<h1 id=\"在项目中添加配置文件\"><a href=\"#在项目中添加配置文件\" class=\"headerlink\" title=\"在项目中添加配置文件\"></a>在项目中添加配置文件</h1><p>→ 在项目根目录下创建名称为webpack.config.js文件<br>当设置好webpack.config.js文件后，每次我们导航到项目，只要使用webpack这一个命令就可以使用各项功能了。<br>module.exports = {<br>entry: “./app.js”,<br>output: {<br>filename: “bundle.js”<br>}<br>}<br>→ 命令行来到需要Webpack的网站下<br>→ 直接输入webpack命令<br>webpack</p>\n<h1 id=\"启用Webpack观察者模式\"><a href=\"#启用Webpack观察者模式\" class=\"headerlink\" title=\"启用Webpack观察者模式\"></a>启用Webpack观察者模式</h1><p>当webpack.config.js的配置发生变化，如果每次都要手动输入webpack命令来生成js文件的话，显得相对麻烦一些。Webpack为我们提供了观察者模式，启用后，任何的webpack.config.js中的变化将接受观察，自动生成最终的js文件。</p>\n<p>→ 命令行来到需要Webpack的网站下<br>→ 启用观察者模式<br>webpack –watch<br>→ 在webpack.config.js中添加watch字段，并设置成true<br>module.exports = {<br>entry: “./app.js”,<br>output: {<br>filename: “bundle.js”<br>},<br>watch: true<br>}<br>→ 这样，每次修改保存webpack.config.js中引用文件，bundle.js的文件会自动更新。</p>\n<h1 id=\"安装启用Webpack-DevServer\"><a href=\"#安装启用Webpack-DevServer\" class=\"headerlink\" title=\"安装启用Webpack DevServer\"></a>安装启用Webpack DevServer</h1><ol>\n<li>导航到目标网站目录</li>\n<li>输入npm命令安装Webpack DevServer<br>npm install webpack-dev-server -g</li>\n<li>输入webpack-dev-server命令<br>webpack-dev-server</li>\n<li><p>看到大致如下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost:8080/webpack-dev-server</div><div class=\"line\">webpack result is served from /</div><div class=\"line\">cotent is served from D:\\...</div><div class=\"line\">Hash:...</div><div class=\"line\">Version:webpack1.12.4</div><div class=\"line\">Time:94ms</div><div class=\"line\">...</div><div class=\"line\">webpack: bundle is now VALID.</div></pre></td></tr></table></figure>\n</li>\n<li><p>在浏览器中输入：<a href=\"http://localhost:8080/webpack-dev-server/\" target=\"_blank\" rel=\"external\">http://localhost:8080/webpack-dev-server/</a><br>同时显示app.js文件中console.log和document.write的内容。</p>\n</li>\n<li>修改webpack.config.js中依赖的文件并保存，浏览器中的内容就会自动更新</li>\n<li>如果不想显示console.log内容呢？</li>\n<li>在浏览器中输入：<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a></li>\n<li>此时，再修改webpack.config.js中依赖的文件并保存，浏览器的内容却不会更新？</li>\n<li>再次回到命令行，加入一个inline的flag<br>webpack-dev-server –inline</li>\n<li>此时，如果修改webpack.config.js中依赖的文件并保存，浏览器中的内容就会自动更新了☺</li>\n</ol>\n<h1 id=\"Bundling多个文件\"><a href=\"#Bundling多个文件\" class=\"headerlink\" title=\"Bundling多个文件\"></a>Bundling多个文件</h1><p>→ 在项目下再添加一个login.js文件<br>console.log(‘login loaded’);<br>→ app.js中引用login.js文件<br>require(‘./login’);<br>document.write(“Welcome to Big Hair Concerts!!Baby”);<br>console.log(‘App loaded’);<br>→ 在浏览器中输入：<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a><br>可以看到变化。<br>→ 在项目下再添加一个utils.js文件<br>console.log(‘logging from the utils.js file…’);<br>→ 来到webpack.config.js下配置如下：<br>module.exports = {<br>entry: [“./utils”,”./app.js”],<br>output: {<br>filename: “bundle.js”<br>},<br>watch: true<br>}<br>→ 命令行导航到当前项目下<br>→ 重新启用Webpack DevServer<br>webpack-dev-server<br>→ 在<a href=\"http://localhost:8080/中体现了相应的变化\" target=\"_blank\" rel=\"external\">http://localhost:8080/中体现了相应的变化</a></p>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><p>→ 创建一个名称为demo的文件夹<br>→ 命令行导航到demo文件夹<br>→ 创建package.json文件<br>npm init<br>然后在命令窗口输入各种信息或直接按Enter键确认，直至最终在demo下创建了package.json文件。<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo\"</span>,</div><div class=\"line\"><span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\"><span class=\"attr\">\"description\"</span>: <span class=\"string\">\"some description about demo\"</span>,</div><div class=\"line\"><span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\"><span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\"><span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"attr\">\"author\"</span>: <span class=\"string\">\"Darren\"</span>,</div><div class=\"line\"><span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>→ 为当前demo项目创建webpack<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm intall webpack --save-dev</div></pre></td></tr></table></figure></p>\n<p>运行成功后</p>\n<blockquote>\n<p>在demo文件夹下多了node_modules文件夹</p>\n<p>在package.json中多了有关webpack的配置</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"demo\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"some description about demo\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"Darren\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"devDependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"webpack\"</span>: <span class=\"string\">\"^1.12.5\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在，就可以在当前的demo项目下，在命令行窗口中运用各种命令了。</p>\n<p>→ 输入如下命令查看webpack的命令语法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack -h</div></pre></td></tr></table></figure></p>\n<p>→ 在demo下创建webpack.config.js文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">'./main.js'</span>,</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">'bundle.js'</span> </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>→ 在demo下创建main.js<br>document.write(“Webpack for the win!”);<br>→ 在demo下运行webpack命令<br>webpack<br>运行成功，在demo下多了一个bundle.js文件。<br>→ 在demo下添加index.html</p>\n<p><html></html></p>\n<p><head></head></p>\n<p><script type=\"text/javascript\" src=\"bundle.js\"></script><br></p>\n<p><body></body></p>\n<p></p><h1>Webpack Demo</h1><br><br><br>→ 在demo下创建second.js<br>module.exports = document.write(“Oh yeah another file”);<br>→ 在main.js中引用second.js文件<br>require(‘./second.js’);<br>document.write(“Webpack for the win!”);<br>→ 在当前demo项目下使用webpack命令<br>webpack<br>发现second.js文件已被引用到bundle.js文件中了。<br>→ 在当前demo项目下使用webpack -p命令<br>webpack -p<br>这样，bundle.js文件的内容呈压缩状态。<br>→ 为当前项目添加loader<br>各种loader在这里：<a href=\"http://webpack.github.io/docs/list-of-loaders.html\" target=\"_blank\" rel=\"external\">http://webpack.github.io/docs/list-of-loaders.html</a><br>比如添加一个CoffeeScript loader<br>npm install coffee-loader –save-dev<br>运行成功后。<br>● 在node_modules文件夹下多了一个coffee-loader子文件夹。<br>● 在package.json中多了与coffee-loader相关的配置<br>{<br>“name”: “demo”,<br>“version”: “1.0.0”,<br>“description”: “some description about demo”,<br>“main”: “index.js”,<br>“scripts”: {<br>“test”: “echo \\”Error: no test specified\\” &amp;&amp; exit 1”<br>},<br>“author”: “Darren”,<br>“license”: “ISC”,<br>“devDependencies”: {<br>“coffee-loader”: “^0.7.2”,<br>“coffee-script”: “^1.10.0”,<br>“webpack”: “^1.12.5”<br>}<br>}<br>● 在webpack.config.js中添加coffee-loader相关<br>module.exports = {<br>entry: ‘./main.js’,<br>output: {<br>filename: ‘bundle.js’<br>},<br>module: {<br>loaders: [<br>{ test: /.coffee$/, loader: “coffee-loader” }<br>]<br>}<br>};<br>在demo下添加third.coffee文件。<br>alert “webpack is boss!”<br>在main.js中引用third.coffee文件。<br>require(‘./second.js’);<br>require(“./third.coffee”);<br>document.write(“Webpack for the win!”);<br>运行webpack命令，在bundle.js中多了与third.coffee文件相关的内容。<br>→ 添加CSS和图片<br>命令行导航到demo文件夹下，运行如下：<br>npm install style-loader css-loader url-loader –save-dev<br>运行成功后，在node_modules中多了css-loader, style-loader,在package.json中也多了相关配置：<br>{<br>“name”: “demo”,<br>“version”: “1.0.0”,<br>“description”: “some description about demo”,<br>“main”: “index.js”,<br>“scripts”: {<br>“test”: “echo \\”Error: no test specified\\” &amp;&amp; exit 1”<br>},<br>“author”: “Darren”,<br>“license”: “ISC”,<br>“devDependencies”: {<br>“coffee-loader”: “^0.7.2”,<br>“coffee-script”: “^1.10.0”,<br>“css-loader”: “^0.22.0”,<br>“style-loader”: “^0.13.0”,<br>“webpack”: “^1.12.5”<br>}<br>}<br>在webpack.config.js中添加如下配置：<p></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">'./main.js'</span>,</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'./build'</span>, <span class=\"comment\">// This is where images AND js will go</span></div><div class=\"line\">        publicPath: <span class=\"string\">'http://yoururl.com/'</span>, <span class=\"comment\">// This is used to generate URLs</span></div><div class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.coffee$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">\"coffee-loader\"</span>&#125;, </div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.css$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'style-loader!css-loader'</span>&#125;,</div><div class=\"line\">            &#123;<span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg)$/</span>, <span class=\"attr\">loader</span>: <span class=\"string\">'url-loader?limit=8192'</span>&#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>注意，在output中，把build用来存放生成的bundle.js和图片文件。publicPath用来存放网站地址。<br>修改index.html文件中的引用路径。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./build/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Webpack Demo<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在demo下添加image.coffee文件。<br><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">img1 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>)</div><div class=\"line\">img1.src = <span class=\"built_in\">require</span>(<span class=\"string\">\"./your-small-image.png\"</span>)</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild img1</div><div class=\"line\">img2 = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"img\"</span>)</div><div class=\"line\">img2.src = <span class=\"built_in\">require</span>(<span class=\"string\">\"./your-big-image.png\"</span>)</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild img2</div></pre></td></tr></table></figure></p>\n<p>在main.js中添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./image.coffee\"</span>)</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./second.js'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./third.coffee\"</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./image.coffee\"</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"Webpack for the win!\"</span>);</div></pre></td></tr></table></figure>\n<p>在demo下创建styles.css文件。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\"><span class=\"attribute\">background</span>: tomato;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在main.js中添加</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./styles.css\"</span>)</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./second.js'</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./third.coffee\"</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./image.coffee\"</span>);</div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./styles.css\"</span>)</div><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"Webpack for the win!\"</span>);</div></pre></td></tr></table></figure>\n<p>运行webpack命令。</p>","prev":{"title":"webpack插件篇：CommonsChunkPlugin详解","slug":"webpack插件篇：CommonsChunkPlugin详解","updated":1487296193997,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack插件篇：CommonsChunkPlugin详解/","path":"2017/02/webpack插件篇：CommonsChunkPlugin详解/","photos":[],"comments":true,"source":"_posts/webpack插件篇：CommonsChunkPlugin详解.md","published":true},"next":{"title":"webpack插件篇：autoprefixer详解","slug":"webpack插件篇：autoprefixer详解","updated":1487293725386,"link":"","permalink":"http://www.fedjs.com/2017/02/webpack插件篇：autoprefixer详解/","path":"2017/02/webpack插件篇：autoprefixer详解/","photos":[],"comments":true,"source":"_posts/webpack插件篇：autoprefixer详解.md","published":true},"categories":[],"tags":[]}],"total":2}